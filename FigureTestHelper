// ReSharper disable All

namespace Project1evm.Library;

public static class FigureTestHelper
{
    public static TNumber CalculatePerimeter<TNumber>(bool is3DFigure, TNumber[] testData, ref uint eventCounter) where TNumber : INumber<TNumber>
    {
        // Выполнить расчет периметра для фигуры на основе входных данных.
        // Счетчик должен увеличиваться при каждом срабатывании событий. Каждое событие должно выполниться один раз.

        TNumber result;
        Figure<TNumber> figure;
        eventCounter++;
        if (!is3DFigure)
        {
            figure = new Triangle<TNumber>(testData[0], testData[1], testData[2]);
            result = figure.CalculatePerimeter();
            return result;

        }

        else
        {
            figure = new Cone<TNumber>(testData[0], testData[1]); //а и б
            result = figure.CalculatePerimeter();
            return result;

        }
        return TNumber.Zero;
    }


    public static TNumber CalculateSquare<TNumber>(bool is3DFigure, TNumber[] testData, ref uint eventCounter) where TNumber : INumber<TNumber>
    {
        // Выполнить расчет площади для фигуры на основе входных данных.
        // Счетчик должен увеличиваться при каждом срабатывании событий. Каждое событие должно выполниться один раз.

        TNumber result;
        Figure<TNumber> figure;
        eventCounter++;
        if (!is3DFigure)
        {
            figure = new Triangle<TNumber>(testData[0], testData[1], testData[2]);
            result = figure.CalculateSquare();
            return result;

        }

        else
        {
            figure = new Cone<TNumber>(testData[0], testData[1]);
            result = figure.CalculateSquare();
            return result;
        }
        return TNumber.Zero;
    }

    public static TNumber CalculateVolume<TNumber>(bool is3DFigure, TNumber[] testData, ref uint eventCounter) where TNumber : INumber<TNumber>
    {
        // Выполнить расчет объема для фигуры на основе входных данных.
        // Счетчик должен увеличиваться при каждом срабатывании событий. Каждое событие должно выполниться один раз.

        TNumber result;
        Figure<TNumber> figure;
        eventCounter++;
        if (!is3DFigure)
        {
            figure = new Triangle<TNumber>(testData[0], testData[1], testData[2]); //а и б
            result = figure.CalculateVolume();
            return result;

        }

        else
        {
            figure = new Cone<TNumber>(testData[0], testData[1]); //а и б
            result = figure.CalculateVolume();
            return result;
        }
        return TNumber.Zero;
    }
}
